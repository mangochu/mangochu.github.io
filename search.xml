<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【BUG系列】Animate On Scroll (AOS)</title>
    <url>/programming/20210825/3159104499/</url>
    <content><![CDATA[<h3 id="什麼是Animate-On-Scroll-AOS-？"><a href="#什麼是Animate-On-Scroll-AOS-？" class="headerlink" title="什麼是Animate On Scroll (AOS)？"></a>什麼是Animate On Scroll (AOS)？</h3><p>連結：<a href="https://michalsnik.github.io/aos/">Animate on scroll</a><br>這是一個名叫Michał Sajnóg的波蘭工程師發表的js庫（Library），在他的Github也提供了CDN引入以及npm安裝（或yarn）兩種方式去使用AOS.js。該網站展示了利用aos滾動捲軸時，觸發div進場的效果。</p>
<iframe src="https://michalsnik.github.io/aos/" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe>

<p>加入自己網頁的方法很簡單，在<code>&lt;body&gt;</code>嵌入js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.1/dist/aos.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  AOS.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>並且在<code>&lt;head&gt;</code>裡嵌入CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.1/dist/aos.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再來就是照官網的範例把想要的特效加到<code>&lt;div&gt;</code>內即可，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以加入其他不同的控制屬性，例如：<br>（留意每個數值有上限，超過就不會作用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-offset</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-delay</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-duration</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-easing</span>=<span class="string">&quot;ease-in-out&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-mirror</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-once</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-anchor-placement</span>=<span class="string">&quot;top-center&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外，如果是用React.js、Vue.js等專案，可以使用npm安裝<code>aos</code>package來管理，安裝方法如下：</p>
<ul>
<li><code>yarn add aos@next</code></li>
<li>或 <code>npm install --save aos@next</code></li>
</ul>
<p>再來於Index.js內引入即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AOS <span class="keyword">from</span> <span class="string">&#x27;aos&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;aos/dist/aos.css&#x27;</span>; <span class="comment">// You can also use &lt;link&gt; for styles</span></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line">AOS.init();</span><br></pre></td></tr></table></figure>

<h3 id="進入正題，我遇到什麼問題？"><a href="#進入正題，我遇到什麼問題？" class="headerlink" title="進入正題，我遇到什麼問題？"></a>進入正題，我遇到什麼問題？</h3><p>教學完後，今天要進入我們的正題，我在使用<code>aos.js</code>的時候遇到的問題，那就是：<strong>會出現多餘的空白！</strong><br>目前發現這個BUG的觸發條件是：</p>
<ol>
<li>該頁面任一<code>&lt;div&gt;</code>使用了<code>data-aos=&quot;fade-left&quot;</code></li>
<li>使用Responsive裝置</li>
</ol>
<p><img data-src="2.gif" alt="BUG?"></p>
<p>馬上我就發現這個專案的Github Issues裡有人遇到跟我一樣的問題，就是這篇<a href="https://github.com/michalsnik/aos/issues/626">White Space on Mobile #626</a>。這篇文章裡有人提供了幾個不錯的方法，不過我自己實測只有在CSS檔內加上以下程式碼有用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>另外我發現overflow-x設置成hidden會讓<code>position: sticky</code>失效，例如Navbar就常使用這個position配置。那這個失效基本上也有解法，就是在position處加上相容性程式碼：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.yourclass</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">  <span class="comment">/*<span class="emoji" alias="point_up" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8">&#x261d;</span> 加上這個*/</span></span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不過如果是利用React styled-components去做css樣式的話，目前不支援<code>-webkit-sticky</code>的語法，所以styled-components目前還沒有解法，只能先放棄使用<code>fade-left</code>了，等之後有找到別的方法再來更新吧！</p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>BUG系列</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript學習筆記 1】什麼是原型基礎（prototype-based）物件導向</title>
    <url>/programming/20211030/2110751047/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是自學筆記的第一篇，我在寫這一篇文章的背景是在學習完Freecodecamp還有實作React一段時間之後，所以對JavaScript的語法和使用上都有一定程度的了解。<br>文章最後也會附上參考資料來源，都是我認為非常棒的作者和文章。因為我本身是自學，所以這樣的學習順序不知是否正確，但是我以自己的經驗認為這樣的學習方式是很好的，原因是：</p>
<blockquote>
<p>先學會用，再了解其背後的原理。</p>
</blockquote>
<p>這樣不會一開始就覺得枯燥學不下去，而且舉例的時候才能有較好的理解和聯想關聯性。</p>
<h2 id="原型基礎物件導向"><a href="#原型基礎物件導向" class="headerlink" title="原型基礎物件導向"></a>原型基礎物件導向</h2><p>首先說明何謂<strong>物件導向程式設計（Object-oriented programming:OOP）</strong>，物件導向是一種程式設計模式，簡單來說就是將「物件」作為程式的基本單元來做設計。<br>並非所有程式語言都有物件導向設計，例如：C就不支援物件導向。後來的C++、Objective-C則是在C之上加入物件導向的功能。</p>
<p>近年來，物件導向的程式設計越來越流行於手稿語言中，包括Python和JavaScript都是建立在OOP原理之上的程式語言，而Perl和PHP亦分別在Perl 5和PHP 4時加入物件導向特性。</p>
<p>JavaScript是原型為基礎的物件導向設計。與Java、C++不同的是，JavaScript原始沒有類別（Class）的概念，而很多教學和文章介紹的類別定義方法（例如：ES6的Class），並不是真的是以類別為基礎(class-based)的，而是仍然以原型為基礎(prototype-based)的語法糖。</p>
<blockquote>
<p>註: 語法糖(Syntactic sugar)指的是在程式語言中添加的某些語法，這些語法對語言本身的功能並沒有影響，但是能更方便使用，可以讓程式碼更加簡潔，有更高可讀性。</p>
</blockquote>
<h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>什麼是原型？</p>
<blockquote>
<p>為了提供繼承性，物件可以有一個原型對象，而且物件將以此原型對象作為模版，繼承其方法及屬性。</p>
</blockquote>
<p>簡單舉一個例子，Mary和Alan都是「人」。他們有共通的屬性，像是有姓名（name）、年齡（age）、性別（gender）、興趣（interests）等等。<br>首先用基礎JavaScript定義物件的方式，先定義一個<code>Person</code>物件，現在將它作為一個「原型」，接著我們用這個原型複製出Mary和Alan。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;last&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;gender&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: <span class="string">&#x27;interests&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是還不知道如何使用原型鍊或建構子繼承的方式，可能會直接定義一個<code>Mary</code>和<code>Alan</code>物件，並客製化屬性的值。<br>其實這樣做完全沒有使用<code>Person</code>這個原型，而是直接建立了兩個新的物件，意義上是錯的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mary = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: [<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alan = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;Alan&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;Green&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: [<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是使用<code>Mary</code>和<code>Alan</code>直接賦值為<code>Person</code>，並修改其屬性的值。<br>這個方法不但沒有沒有建立新的物件，而且<code>Mary</code>、<code>Alan</code>的屬性都會在每一次新的賦值後被更改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mary = Person</span><br><span class="line">Mary.name.first = <span class="string">&#x27;Mary&#x27;</span></span><br><span class="line">Mary.name.last = <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">Mary.age = <span class="number">21</span></span><br><span class="line">Mary.gender = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">Mary.interests = [<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.age)   <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alan = Person</span><br><span class="line">Alan.name.first = <span class="string">&#x27;Alan&#x27;</span></span><br><span class="line">Alan.name.last = <span class="string">&#x27;Green&#x27;</span></span><br><span class="line">Alan.age = <span class="number">26</span></span><br><span class="line">Alan.gender = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">Alan.interests = [<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.age)   <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(Mary.age)     <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.age)     <span class="comment">// 26</span></span><br><span class="line"><span class="comment">// 這時候Mary也被更改成Alan了</span></span><br></pre></td></tr></table></figure>

<p>由此可知用現有基礎觀念是無法實現「原型」的概念，所以這邊需要來認識「建構函式」。</p>
<h2 id="建構函式（Constructor）和實例（instance）"><a href="#建構函式（Constructor）和實例（instance）" class="headerlink" title="建構函式（Constructor）和實例（instance）"></a>建構函式（Constructor）和實例（instance）</h2><p>建構函式的概念是從Java和C++來的，前面有稍微提到Java和C++是基於類別的程式語言，會利用類別來建立實例，而在類別裡有個很特別的函式叫「建構函式」，他會進行實例的初始化，設置對象屬性的初始值。其中，C++及Java都始用<code>new</code>命令來產生新的實例。</p>
<p>C++的寫法是：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName *object = <span class="keyword">new</span> <span class="built_in">ClassName</span>(param);</span><br></pre></td></tr></table></figure>

<p>Java的寫法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Foo foo = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure>

<p>所以設計者便把<code>new</code>引入JavaScript，但是JavaScript沒有Class，後面要接什麼呢？<br>這時，他想到C++及Java使用<code>new</code>命令時，都會調用「類別」裡的建構函數（constructor），所以他做了一個簡化，直接在<code>new</code>的後面接一個函式吧！</p>
<p>以上一個例子來說，現在有一個叫做<code>Person</code>的函式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: first,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : last</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.interests = interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Mary = <span class="keyword">new</span> Person(<span class="string">&#x27;Mary&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;female&#x27;</span>,[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> Alan = <span class="keyword">new</span> Person(<span class="string">&#x27;Alan&#x27;</span>,<span class="string">&#x27;Green&#x27;</span>,<span class="number">26</span>,<span class="string">&#x27;male&#x27;</span>,[<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>對這個函數使用<code>new</code>，JavaScript就會將它視為建構函數，並且生成一個<code>Person</code>的實例。建構函數中的<code>this</code>代表新創建的實例對象。</p>
<h3 id="new運算子的缺點"><a href="#new運算子的缺點" class="headerlink" title="new運算子的缺點"></a>new運算子的缺點</h3><p>用建構函數生成實例對象，有一個缺點，就是無法共享屬性和方法。接續上一段程式碼，修改Mary或Alan其中一個，不會影響到另一個。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Alan.age = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(Mary.age) <span class="comment">// 同樣顯示21，不受Alan更改的影響</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.age) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>為什麼說這是缺點？<br>每一個實例對象，都有自己的屬性和方法，因為沒辦法共享數據，所以沒辦法節省資源。</p>
<h2 id="prototype屬性引入"><a href="#prototype屬性引入" class="headerlink" title="prototype屬性引入"></a>prototype屬性引入</h2><p>考慮到這一點，設計者決定為建構函數添加一個prototype屬性，而prototype屬性值就是一個物件。所有實例對象需要共享的屬性和方法，都放在這個物件中；不需要共享的屬性和方法，就放在建構函式中。</p>
<p>實例一但創建（如Alan和Mary），將自動引用prototype物件的屬性和方法。也就是說，實例的屬性和方法，分成兩種，一種是本地的，另一種是引用的。</p>
<p>用同樣個例子說明，建構函式中的屬性（<code>first</code>、<code>last</code>、<code>age</code>、<code>gender</code>、<code>interests</code>）這些都是本地給值，都會各自佔用資源。接下來我們用prototype給值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: first,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : last</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.interests = interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.species = <span class="string">&#x27;human&#x27;</span> <span class="comment">// 會在Person.prototype新增species屬性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Mary = <span class="keyword">new</span> Person(<span class="string">&#x27;Mary&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;female&#x27;</span>,[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> Alan = <span class="keyword">new</span> Person(<span class="string">&#x27;Alan&#x27;</span>,<span class="string">&#x27;Green&#x27;</span>,<span class="number">26</span>,<span class="string">&#x27;male&#x27;</span>,[<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Mary.species) <span class="comment">// human</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.species) <span class="comment">// human</span></span><br></pre></td></tr></table></figure>

<p>現在species屬性放在prototype物件裡，是兩個實例共享的，只要修改prototype物件，就會同時影響兩個實例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.species = <span class="string">&#x27;vampire&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Mary.species) <span class="comment">// vampire</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.species) <span class="comment">// vampire</span></span><br></pre></td></tr></table></figure>

<h2 id="原型鏈（prototype-chain）"><a href="#原型鏈（prototype-chain）" class="headerlink" title="原型鏈（prototype chain）"></a>原型鏈（prototype chain）</h2><blockquote>
<p>JavaScript沒有父類、子類的繼承，也沒有類別（class）和實例（instance）的區分，全靠「原型鏈」（prototype chain）的方式來繼承。</p>
</blockquote>
<p>物件與物件之間的連結有各自的屬性，讓JavaScript可以實現「繼承」，接下來就讓我們深入了解這些屬性。</p>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>所有JavaScript中的函式都有一個內建的<code>prototype</code>屬性，指向一個特殊的prototype物件，prototype物件中也有一個<code>constructor</code>屬性，指向原來的函式。<br>用程式碼來驗證：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img data-src="2.png"></p>
<h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>再來是__proto__這個內部屬性，它是每一個JavaScript裡物件都有的內部屬性，它會指向該物件的原型（prototype），用來連接出原型鏈，也就是JavaScript的繼承方式。</p>
<p>對於一個函式而言，它的原型就是<code>Function.prototype</code>，這可以說是所有函式的發源地。所以Person函式的<code>__proto__</code>會指向Function.prototype。</p>
<p>那<code>Person.prototype</code>的<code>__proto__</code>又指向哪裡？Person.prototype本身是也一個物件，它直接指向JavaScript中最上層的物件起源<code>Object.prototype</code>。</p>
<p>由此可知，<code>Function.prototype</code>也會同樣指向<code>Object.prototype</code>。然而剛剛也說了<code>Object.prototype</code>是原型鏈的最上層，那它的__proto__又會指向哪呢？以下用程式碼驗證就清楚了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__) <span class="comment">// Function.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__.__proto__) <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__.__proto__.__proto__) <span class="comment">// Null</span></span><br></pre></td></tr></table></figure>

<p>原型鏈的終點答案就是指向<code>Null</code>，所以可以說<code>Object.prototype</code>就是原型鏈的最上層。</p>
<p>用之前的例子做出以下簡單的圖示，圖片中紅色箭頭即為<code>__proto__</code>的指向</p>
<p><img data-src="1_drawio.png"></p>
<blockquote>
<p>註：<code>__proto__</code>注意是前後各有兩條下底線（_）。<br>註：雖然現今<code>__proto__</code>被幾乎所有瀏覽器支援，且ES6已經正式被標準化，以確保 Web 瀏覽器的兼容性，但是不推薦使用，除了標準化的原因之外還有性能問題。</p>
</blockquote>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章不是我自己發想的，頂多只能算是記錄我查的許多資料集大成。了解原型可以幫助了解JavaScript的運作模式，尤其是在寫ES6的Class語法糖的時候，裡面的constructor是什麼意思，為什麼要用extends，好像都可以比較了解了。（雖然目前class componment目前正在被社群逐漸淘汰中，都改用function conponent取代）</p>
<p>參考資料：</p>
<ol>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/prototype.html">從ES6開始的JavaScript學習生活 - 原型基礎物件導向</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10205313">你懂 JavaScript 嗎？#19 原型（Prototype）</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10223556">15. [JS] 什麼是原型鏈？</a></li>
<li><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/692845/#outline__3">JavaScript原型系列（一）構造函數、原型和原型鏈</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a></li>
<li><a href="https://cythilya.github.io/2018/10/26/prototype/">你懂 JavaScript 嗎？#19 原型（Prototype）</a></li>
<li><a href="https://pjchender.blogspot.com/2016/06/javascriptprototypeprototype.html">[筆記] 了解JavaScript中原型(prototype)、原型鍊（prototype chain）和繼承(inheritance)的概念</a></li>
<li><a href="https://maxleebk.com/2020/07/25/prototype/">面試官最愛考的 JS 原型鏈</a></li>
<li><a href="https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-%E5%8E%9F%E5%9E%8B%E9%8F%88-prototype-chain-96c742893795">JS基本觀念: 原型鏈(prototype chain)</a></li>
</ol>
<p>尤其推薦參考資料5、8</p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>JavaScript學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>開發工具 - VSCode基礎設置</title>
    <url>/programming/20210806/3967904930/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Visual Studio Code（以下簡稱VSCode）是目前大家最推薦的原始碼編輯器，VSCode的好處多多，支援很多程式語言還有可以在內建的擴充程式商店安裝擴充，也有偵錯和代碼自動補全的功能等等，最重要的是<strong>免費</strong>，所以很多人推薦新手直接學習VSCode。筆者從自學一開始就是接觸VSCode。其他還有很多編輯器（Sublime、ATOM、Dreamweaver、……）筆者自己也沒用過（汗）。</p>
<p>以下會說明VSCode內的一些功能設定方法，擴充推薦未來會再出一篇文章說明。</p>
<h3 id="TAB縮排"><a href="#TAB縮排" class="headerlink" title="TAB縮排"></a>TAB縮排</h3><p>VSCode預設的Tab為4個半形空白，但是根據ESLint的標準，在寫JS的時候還是改成2個半形空白會比較好。<br>（關於ESLint的說明，很推薦大家去看Eddy大的Gitbook中<a href="https://eyesofkids.gitbooks.io/react-basic-zh-tw/content/day03_eslint/">工具篇-ESLint</a>）</p>
<p>首先說明VSCode的自動縮排快捷鍵是：<code>Shift + Alt + F</code></p>
<h4 id="選擇縮排"><a href="#選擇縮排" class="headerlink" title="選擇縮排"></a>選擇縮排</h4><p> 看向視窗的下方有一個空格：4就代表每一行Tab的縮排是4個空格<br> <img data-src="2.png" alt="空格：4"><br> 若要將其設為2，則是<strong>點選空格後，選擇「使用空格鍵進行縮排」</strong>，改為2即可。<br> 修改後再使用VSCode自動縮排（Shift+Alt+F）就會變更了<br> <img data-src="2-1.gif" alt="修改空格"></p>
<h4 id="選單設定"><a href="#選單設定" class="headerlink" title="選單設定"></a>選單設定</h4><p> 另外如果未來不想要每次都要修改縮排設定的話，就到選單設定裡做一些變更：</p>
<ol>
<li><strong>檔案&gt;喜好設定&gt;設定</strong></li>
<li>搜尋Tab size並將其值改為2</li>
</ol>
<p><img data-src="3.png" alt="檔案&gt;喜好設定&gt;設定"></p>
<p><img data-src="4.png" alt="Tab size to 2"><br> 並且把Detect Indentation 取消勾選<br><img data-src="1.png" alt="Detect Indentation"></p>
<h3 id="自訂程式碼片段（Snippet）"><a href="#自訂程式碼片段（Snippet）" class="headerlink" title="自訂程式碼片段（Snippet）"></a>自訂程式碼片段（Snippet）</h3><p>當我們有重複的程式碼要輸入時，有Snippet可以提升我們Coding的效率。<br>範例如下：<br><img data-src="5.gif" alt="snippet示範"></p>
<p>或者我們可以用一個模板讓我們填入自定義值：<br><img data-src="5-1.gif" alt="snippet示範2"></p>
<p>以上範例都是需要自己建立的，不是開啟就有的功能喔！<br>要建立自己的Snippet首先到<strong>檔案&gt;喜好設定&gt;使用者程式碼片段</strong><br><img data-src="5-2.png" alt="Snippet設定"><br>接著可以根據需要的語言進行設定，可以看到我現有的程式碼片段就有2個（css/ html），也可以選擇其他的語言或者全域程式碼片段去設定。<br><img data-src="5-3.png" alt="Snippet設定2"></p>
<p>Snippet設定會以json檔案編輯，以下為格式說明：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;//Snippet名稱&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;//想要的縮寫&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;//Snippet內容&quot;</span></span><br><span class="line">    ],</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;//說明描述&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中body裡的設定有幾點說明：</p>
<ul>
<li>用”$”加上數字的組合可以成為特殊字組（例如：<code>$1</code>, <code>$2</code>），特殊字組所在的區域就是每按1次TAB會停在該區域，可以打上任何值再按TAB跳到下個區域，例如：<code>&quot;&lt;img src=\&quot;https://picsum.photos/$1/$2?random=$3\&quot;&gt;&quot;</code></li>
<li>因為是字串（string），前後必須加上雙引號（”），那問題來了裡面如果又有雙引號就會碰上錯誤，這時候要在裡面的雙引號前面加上倒斜線（<code>\&quot;</code>），例如：<code>&quot;&lt;img src=\&quot;https://picsum.photos/300/400?random=1\&quot;&gt;&quot;</code></li>
<li>body的每一個字串陣列都代表程式碼的<strong>一行</strong>，換行要記得在每行字串後用逗號（,）隔開，例如：</li>
</ul>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;* &#123;&quot;</span>,</span><br><span class="line"><span class="string">&quot;margin: 0;&quot;</span>,</span><br><span class="line"><span class="string">&quot;padding: 0;&quot;</span>,</span><br><span class="line"><span class="string">&quot;list-style: none;&quot;</span>,</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="快速撰寫輔助工具（Emmet）-使用縮寫換行（wrap-with-abbreviation）"><a href="#快速撰寫輔助工具（Emmet）-使用縮寫換行（wrap-with-abbreviation）" class="headerlink" title="快速撰寫輔助工具（Emmet） - 使用縮寫換行（wrap with abbreviation）"></a>快速撰寫輔助工具（Emmet） - 使用縮寫換行（wrap with abbreviation）</h3><p>高手在使用VSCode的時候其實是可以不使用滑鼠完成大部分的程式碼編寫，而且效率比使用滑鼠還高。<br>這也是多虧了Emmet功能，所以最後要介紹的是Emmet其中一項功能，快速包住程式碼（wrap with abbreviation）<br>首先說明VSCode有內建功能，當你反白一段字串後可以用輸入引號或大中小括號（’’,””,(),[],{}）快速把反白字串包住。<br><img data-src="6.gif" alt="Emmet"><br>而現在要介紹的就是進階版功能，用標籤（Tag)把字串快速包住：<br><img data-src="6-1.gif" alt="縮寫換行示範"></p>
<p>這個其實是使用了工作台的功能Wrap with abbreviation，步驟如下：</p>
<ol>
<li><code>Ctrl + Shift + P</code>可以叫出工作台</li>
<li>輸入wrap with abbreviation按下Enter</li>
<li>輸入你想包入的縮寫，就大功告成啦<br><img data-src="6-2.png" alt="wrap with abbreviation"><br>另外如果要做到像我一樣迅速使用，就是要設定快捷鍵。<br>設定方法就是按下右邊的齒輪，進去後再按編輯鍵設定即可，這邊我是設定<code>Shift + Alt + W</code><br><img data-src="6-3.png" alt="shortcut setting"></li>
</ol>
<p>以上文章是我整理的一些實用功能和設定，其實如果平常有空應該多爬爬這類型的文章，應該可以加快不少寫程式碼的速度。<br>那麼我們下一篇見！</p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>開發工具 - VSCode擴充功能</title>
    <url>/programming/20210808/91963548/</url>
    <content><![CDATA[<h3 id="擴充套件"><a href="#擴充套件" class="headerlink" title="擴充套件"></a>擴充套件</h3><p>又稱延伸模組（Extension）。<br>首先要先說明我目前主要開發的語言是Javascript和React，目前還努力在前端打滾學習中。所以擴充主要都會圍繞在HTML、CSS、Javascript、React上。</p>
<p>使用擴充是見仁見智，所以我會依個人使用習慣來推薦，有興趣的就繼續看下去吧！</p>
<h3 id="高度推薦（必裝）"><a href="#高度推薦（必裝）" class="headerlink" title="高度推薦（必裝）"></a>高度推薦（必裝）</h3><h4 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h4><p><img data-src="1.png" alt="Live server"><br>Live Server能將HTML檔案轉換成瀏覽器網站並即時更新顯示，注意你需要先開啟一份HTML檔（.html)，接著只要按下VSCode右下角的<code>Go Live</code>按鈕或者右鍵<code>Open with live server</code>，就能開啟執行本地伺服器（Localhost）。</p>
<h4 id="Formate-CSS-LESS-and-SCSS-Formatter"><a href="#Formate-CSS-LESS-and-SCSS-Formatter" class="headerlink" title="Formate: CSS, LESS and SCSS Formatter"></a>Formate: CSS, LESS and SCSS Formatter</h4><p><img data-src="2.png" alt="Formate: CSS, LESS and SCSS Formatter"><br>HTML檔案在編譯的時候VSCode是有預設排版的，所以不需要另外安裝擴充，但是CSS就不一樣了，VSCode是沒有預設排版的功能，所以我推薦下載這個擴充。</p>
<h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><p><img data-src="3.png" alt="ESLint"><br>ESLint這個擴充是Javascript風格指引的輔助工具，如果說未來需要和別人共同開發專案，最好是從現在開始培養編寫習慣。<del>不然以後也許別人看你的程式碼會想拿磚頭砸你</del><br>剛開始使用一定會報出一堆錯誤，會覺得很麻煩。但是每個錯誤去了解為什麼並修正後，以後你的寫作風格就會很統一了。</p>
<h4 id="cdnjs"><a href="#cdnjs" class="headerlink" title="cdnjs"></a>cdnjs</h4><p><img data-src="4.png" alt="cdnjs"><br>這個擴充可以方便你嵌入或查詢cdnjs裡的各個JS框架版本，例如：jquery、Fontawesome、……等等。</p>
<h4 id="Chinese-Lorem"><a href="#Chinese-Lorem" class="headerlink" title="Chinese Lorem"></a>Chinese Lorem</h4><p><img data-src="5.png" alt="Chinese Lorem"><br>中文版的假字產生器，只需要輸入<code>ctlorem</code>或者加上字數<code>ctlorem120</code>。</p>
<h3 id="熱門推薦（選配）"><a href="#熱門推薦（選配）" class="headerlink" title="熱門推薦（選配）"></a>熱門推薦（選配）</h3><h4 id="indent-rainbow"><a href="#indent-rainbow" class="headerlink" title="indent-rainbow"></a>indent-rainbow</h4><p><img data-src="6.png" alt="indent-rainbow"><br>會把縮排空格填上彩虹的顏色，可以讓你更輕鬆比對縮排位置，雖說是熱門推薦但我是覺得畫面有點花而沒有使用，看個人吧！</p>
<h4 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a>Code Spell Checker</h4><p><img data-src="7.png" alt="Code Spell Checker"><br>這個擴充有利有弊，檢查英文有無拼錯非常好用，但是某些情況會誤報，而個人看到誤報的毛毛蟲會有強迫症想去掉，也是看個人有沒有英文拼字輔助的需求。</p>
<h4 id="Better-comments"><a href="#Better-comments" class="headerlink" title="Better comments"></a>Better comments</h4><p><img data-src="8.png" alt="Better comments"><br>可以讓你附註的文字變顏色，可以顯著標記之後要回來修改的地方等等重大資訊。</p>
<h3 id="根據語言需求安裝"><a href="#根據語言需求安裝" class="headerlink" title="根據語言需求安裝"></a>根據語言需求安裝</h3><h4 id="ES7-React-Redux-GraphQL-React-Native-snippets"><a href="#ES7-React-Redux-GraphQL-React-Native-snippets" class="headerlink" title="ES7 React/Redux/GraphQL/React-Native snippets"></a>ES7 React/Redux/GraphQL/React-Native snippets</h4><p><img data-src="9.png" alt="ES7 React/Redux/GraphQL/React-Native snippets"><br>一些React相關的snippets，有在寫React framework的是必載。</p>
<h4 id="Simple-React-Snippets"><a href="#Simple-React-Snippets" class="headerlink" title="Simple React Snippets"></a>Simple React Snippets</h4><p><img data-src="10.png" alt="Simple React Snippets"><br>這個和前一個擴充一樣是React snippets，但是內容稍微不同，可以互補使用。</p>
<h4 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h4><p><img data-src="11.png" alt="markdownlint"><br>因為我的網誌就是用markdown語法寫的，為了統一文章的寫作風格，所以我有下載markdownlint來糾正一些寫法的錯誤。有在寫Markdown的人也很推薦使用。</p>
<h3 id="其實這些擴充不用裝"><a href="#其實這些擴充不用裝" class="headerlink" title="其實這些擴充不用裝"></a>其實這些擴充不用裝</h3><h4 id="Auto-rename-tag"><a href="#Auto-rename-tag" class="headerlink" title="Auto rename tag"></a>Auto rename tag</h4><p>改標籤（TAG）會自動幫你連開頭和結尾一起變更，只適用.html檔，javascript內的是不適用這功能的。<br>但是這個擴充其實不用安裝，VSCode就有內建了，只需要在<code>檔案&gt;喜好設定&gt;設定</code>內搜尋<code>Editor: Linked Editing</code>勾選即可。（預設是：關）</p>
<h4 id="Auto-close-tag"><a href="#Auto-close-tag" class="headerlink" title="Auto close tag"></a>Auto close tag</h4><p>能自動在開頭標籤後生成結束標籤。<br>這個下載500萬次的擴充其實也是VSCode就有內建的功能，而且不必特別設定，預設就是開。但如果不小心關到，可以到<code>檔案&gt;喜好設定&gt;設定</code>搜尋<code>Auto Closing Tags</code>，把HTML: Auto Closing Tags、Javascript: Auto Closing Tags、Typescript: Auto Closing Tags這三項打勾<br>如果是用setting.json修改語法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;html.autoClosingTags&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.autoClosingTags&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;typescript.autoClosingTags&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
</search>
