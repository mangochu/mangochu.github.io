<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUG系列 - Animate On Scroll (AOS)</title>
    <url>/programming/20210825/3159104499/</url>
    <content><![CDATA[<h3 id="什麼是Animate-On-Scroll-AOS-？"><a href="#什麼是Animate-On-Scroll-AOS-？" class="headerlink" title="什麼是Animate On Scroll (AOS)？"></a>什麼是Animate On Scroll (AOS)？</h3><p>連結：<span class="exturl" data-url="aHR0cHM6Ly9taWNoYWxzbmlrLmdpdGh1Yi5pby9hb3Mv">Animate on scroll<i class="fa fa-external-link-alt"></i></span><br>這是一個名叫Michał Sajnóg的波蘭工程師發表的js庫（Library），在他的Github也提供了CDN引入以及npm安裝（或yarn）兩種方式去使用AOS.js。該網站展示了利用aos滾動捲軸時，觸發div進場的效果。</p>
<iframe src="https://michalsnik.github.io/aos/" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe>

<p>加入自己網頁的方法很簡單，在<code>&lt;body&gt;</code>嵌入js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.1/dist/aos.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  AOS.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>並且在<code>&lt;head&gt;</code>裡嵌入CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.1/dist/aos.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再來就是照官網的範例把想要的特效加到<code>&lt;div&gt;</code>內即可，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以加入其他不同的控制屬性，例如：<br>（留意每個數值有上限，超過就不會作用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-offset</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-delay</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-duration</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-easing</span>=<span class="string">&quot;ease-in-out&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-mirror</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-once</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-aos-anchor-placement</span>=<span class="string">&quot;top-center&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外，如果是用React.js、Vue.js等專案，可以使用npm安裝<code>aos</code>package來管理，安裝方法如下：</p>
<ul>
<li><code>yarn add aos@next</code></li>
<li>或 <code>npm install --save aos@next</code></li>
</ul>
<p>再來於Index.js內引入即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AOS <span class="keyword">from</span> <span class="string">&#x27;aos&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;aos/dist/aos.css&#x27;</span>; <span class="comment">// You can also use &lt;link&gt; for styles</span></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line">AOS.init();</span><br></pre></td></tr></table></figure>

<h3 id="進入正題，我遇到什麼問題？"><a href="#進入正題，我遇到什麼問題？" class="headerlink" title="進入正題，我遇到什麼問題？"></a>進入正題，我遇到什麼問題？</h3><p>教學完後，今天要進入我們的正題，我在使用<code>aos.js</code>的時候遇到的問題，那就是：<strong>會出現多餘的空白！</strong><br>目前發現這個BUG的觸發條件是：</p>
<ol>
<li>該頁面任一<code>&lt;div&gt;</code>使用了<code>data-aos=&quot;fade-left&quot;</code></li>
<li>使用Responsive裝置</li>
</ol>
<p><img data-src="2.gif" alt="BUG?"></p>
<p>馬上我就發現這個專案的Github Issues裡有人遇到跟我一樣的問題，就是這篇<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY2hhbHNuaWsvYW9zL2lzc3Vlcy82MjY=">White Space on Mobile #626<i class="fa fa-external-link-alt"></i></span>。這篇文章裡有人提供了幾個不錯的方法，不過我自己實測只有在CSS檔內加上以下程式碼有用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>另外我發現overflow-x設置成hidden會讓<code>position: sticky</code>失效，例如Navbar就常使用這個position配置。那這個失效基本上也有解法，就是在position處加上相容性程式碼：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.yourclass</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">  <span class="comment">/*<span class="emoji" alias="point_up" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8">&#x261d;</span> 加上這個*/</span></span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不過如果是利用React styled-components去做css樣式的話，目前不支援<code>-webkit-sticky</code>的語法，所以styled-components目前還沒有解法，只能先放棄使用<code>fade-left</code>了，等之後有找到別的方法再來更新吧！</p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>BUG系列</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript學習筆記1 - 什麼是原型基礎物件導向（上）</title>
    <url>/programming/20211030/2110751047/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是自學筆記的第一篇，我在寫這一篇文章的背景是在學習完Freecodecamp還有實作React一段時間之後，所以對JavaScript的語法和使用上都有一定程度的了解。<br>文章最後也會附上參考資料來源，都是我認為非常棒的作者和文章。因為我本身是自學，所以這樣的學習順序不知是否正確，但是我以自己的經驗認為這樣的學習方式是很好的，原因是：</p>
<blockquote>
<p>先學會用，再了解其背後的原理。</p>
</blockquote>
<p>這樣不會一開始就覺得枯燥學不下去，而且舉例的時候才能有較好的理解和聯想關聯性。</p>
<h2 id="原型基礎物件導向"><a href="#原型基礎物件導向" class="headerlink" title="原型基礎物件導向"></a>原型基礎物件導向</h2><p>首先說明何謂<strong>物件導向程式設計（Object-oriented programming:OOP）</strong>，物件導向是一種程式設計模式，簡單來說就是將「物件」作為程式的基本單元來做設計。<br>並非所有程式語言都有物件導向設計，例如：C就不支援物件導向。後來的C++、Objective-C則是在C之上加入物件導向的功能。</p>
<p>近年來，物件導向的程式設計越來越流行於手稿語言中，包括Python和JavaScript都是建立在OOP原理之上的程式語言，而Perl和PHP亦分別在Perl 5和PHP 4時加入物件導向特性。</p>
<p>JavaScript是原型為基礎的物件導向設計。與Java、C++不同的是，JavaScript原始沒有類別（Class）的概念，而很多教學和文章介紹的類別定義方法（例如：ES6的Class），並不是真的是以類別為基礎(class-based)的，而是仍然以原型為基礎(prototype-based)的語法糖。</p>
<blockquote>
<p>註: 語法糖(Syntactic sugar)指的是在程式語言中添加的某些語法，這些語法對語言本身的功能並沒有影響，但是能更方便使用，可以讓程式碼更加簡潔，有更高可讀性。</p>
</blockquote>
<h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>什麼是原型？</p>
<blockquote>
<p>為了提供繼承性，物件可以有一個原型對象，而且物件將以此原型對象作為模版，繼承其方法及屬性。</p>
</blockquote>
<p>簡單舉一個例子，Mary和Alan都是「人」。他們有共通的屬性，像是有姓名（name）、年齡（age）、性別（gender）、興趣（interests）等等。<br>首先用基礎JavaScript定義物件的方式，先定義一個<code>Person</code>物件，現在將它作為一個「原型」，接著我們用這個原型複製出Mary和Alan。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;last&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;gender&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: <span class="string">&#x27;interests&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是還不知道如何使用原型鍊或建構子繼承的方式，可能會直接定義一個<code>Mary</code>和<code>Alan</code>物件，並客製化屬性的值。<br>其實這樣做完全沒有使用<code>Person</code>這個原型，而是直接建立了兩個新的物件，意義上是錯的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mary = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: [<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alan = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;Alan&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;Green&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: [<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是使用<code>Mary</code>和<code>Alan</code>直接賦值為<code>Person</code>，並修改其屬性的值。<br>這個方法不但沒有沒有建立新的物件，而且<code>Mary</code>、<code>Alan</code>的屬性都會在每一次新的賦值後被更改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mary = Person</span><br><span class="line">Mary.name.first = <span class="string">&#x27;Mary&#x27;</span></span><br><span class="line">Mary.name.last = <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">Mary.age = <span class="number">21</span></span><br><span class="line">Mary.gender = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">Mary.interests = [<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.age)   <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alan = Person</span><br><span class="line">Alan.name.first = <span class="string">&#x27;Alan&#x27;</span></span><br><span class="line">Alan.name.last = <span class="string">&#x27;Green&#x27;</span></span><br><span class="line">Alan.age = <span class="number">26</span></span><br><span class="line">Alan.gender = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">Alan.interests = [<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.age)   <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(Mary.age)     <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.age)     <span class="comment">// 26</span></span><br><span class="line"><span class="comment">// 這時候Mary也被更改成Alan了</span></span><br></pre></td></tr></table></figure>

<p>由此可知用現有基礎觀念是無法實現「原型」的概念，所以這邊需要來認識「建構函式」。</p>
<h2 id="建構函式（Constructor）和實例（instance）"><a href="#建構函式（Constructor）和實例（instance）" class="headerlink" title="建構函式（Constructor）和實例（instance）"></a>建構函式（Constructor）和實例（instance）</h2><p>建構函式的概念是從Java和C++來的，前面有稍微提到Java和C++是基於類別的程式語言，會利用類別來建立實例，而在類別裡有個很特別的函式叫「建構函式」，他會進行實例的初始化，設置對象屬性的初始值。其中，C++及Java都始用<code>new</code>命令來產生新的實例。</p>
<p>C++的寫法是：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName *object = <span class="keyword">new</span> <span class="built_in">ClassName</span>(param);</span><br></pre></td></tr></table></figure>

<p>Java的寫法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Foo foo = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure>

<p>所以設計者便把<code>new</code>引入JavaScript，但是JavaScript沒有Class，後面要接什麼呢？<br>這時，他想到C++及Java使用<code>new</code>命令時，都會調用「類別」裡的建構函數（constructor），所以他做了一個簡化，直接在<code>new</code>的後面接一個函式吧！</p>
<p>以上一個例子來說，現在有一個叫做<code>Person</code>的函式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: first,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : last</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.interests = interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Mary = <span class="keyword">new</span> Person(<span class="string">&#x27;Mary&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;female&#x27;</span>,[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> Alan = <span class="keyword">new</span> Person(<span class="string">&#x27;Alan&#x27;</span>,<span class="string">&#x27;Green&#x27;</span>,<span class="number">26</span>,<span class="string">&#x27;male&#x27;</span>,[<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>對這個函數使用<code>new</code>，JavaScript就會將它視為建構函數，並且生成一個<code>Person</code>的實例。建構函數中的<code>this</code>代表新創建的實例對象。</p>
<h3 id="new運算子的缺點"><a href="#new運算子的缺點" class="headerlink" title="new運算子的缺點"></a>new運算子的缺點</h3><p>用建構函數生成實例對象，有一個缺點，就是無法共享屬性和方法。接續上一段程式碼，修改Mary或Alan其中一個，不會影響到另一個。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Alan.age = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(Mary.age) <span class="comment">// 同樣顯示21，不受Alan更改的影響</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.age) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>為什麼說這是缺點？<br>每一個實例對象，都有自己的屬性和方法，因為沒辦法共享數據，所以沒辦法節省資源。</p>
<h2 id="prototype屬性引入"><a href="#prototype屬性引入" class="headerlink" title="prototype屬性引入"></a>prototype屬性引入</h2><p>考慮到這一點，設計者決定為建構函數添加一個prototype屬性，而prototype屬性值就是一個物件。所有實例對象需要共享的屬性和方法，都放在這個物件中；不需要共享的屬性和方法，就放在建構函式中。</p>
<p>實例一但創建（如Alan和Mary），將自動引用prototype物件的屬性和方法。也就是說，實例的屬性和方法，分成兩種，一種是本地的，另一種是引用的。</p>
<p>用同樣個例子說明，建構函式中的屬性（<code>first</code>、<code>last</code>、<code>age</code>、<code>gender</code>、<code>interests</code>）這些都是本地給值，都會各自佔用資源。接下來我們用prototype給值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: first,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : last</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.interests = interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.species = <span class="string">&#x27;human&#x27;</span> <span class="comment">// 會在Person.prototype新增species屬性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Mary = <span class="keyword">new</span> Person(<span class="string">&#x27;Mary&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;female&#x27;</span>,[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;skiing&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> Alan = <span class="keyword">new</span> Person(<span class="string">&#x27;Alan&#x27;</span>,<span class="string">&#x27;Green&#x27;</span>,<span class="number">26</span>,<span class="string">&#x27;male&#x27;</span>,[<span class="string">&#x27;movie&#x27;</span>,<span class="string">&#x27;hiking&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Mary.species) <span class="comment">// human</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.species) <span class="comment">// human</span></span><br></pre></td></tr></table></figure>

<p>現在species屬性放在prototype物件裡，是兩個實例共享的，只要修改prototype物件，就會同時影響兩個實例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.species = <span class="string">&#x27;vampire&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Mary.species) <span class="comment">// vampire</span></span><br><span class="line"><span class="built_in">console</span>.log(Alan.species) <span class="comment">// vampire</span></span><br></pre></td></tr></table></figure>

<h2 id="原型鏈（prototype-chain）"><a href="#原型鏈（prototype-chain）" class="headerlink" title="原型鏈（prototype chain）"></a>原型鏈（prototype chain）</h2><blockquote>
<p>JavaScript沒有父類、子類的繼承，也沒有類別（class）和實例（instance）的區分，全靠「原型鏈」（prototype chain）的方式來繼承。</p>
</blockquote>
<p>物件與物件之間的連結有各自的屬性，讓JavaScript可以實現「繼承」，接下來就讓我們深入了解這些屬性。</p>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>所有JavaScript中的函式都有一個內建的<code>prototype</code>屬性，指向一個特殊的prototype物件，prototype物件中也有一個<code>constructor</code>屬性，指向原來的函式。<br>用程式碼來驗證：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img data-src="2.png"></p>
<h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>再來是__proto__這個內部屬性，它是每一個JavaScript裡物件都有的內部屬性，它會指向該物件的原型（prototype），用來連接出原型鏈，也就是JavaScript的繼承方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Alan.species) <span class="comment">//human</span></span><br></pre></td></tr></table></figure>

<p>當查找物件的屬性或方法時，若本身的物件找不到時，就往更上層尋找，直到串鏈尾端。實例<code>Alan</code>其實是透過原型prototype才得以繼承species屬性。</p>
<p>對於一個函式而言，它的原型就是<code>Function.prototype</code>，這可以說是所有函式的發源地。所以Person函式的<code>__proto__</code>會指向Function.prototype。</p>
<p>那<code>Person.prototype</code>的<code>__proto__</code>又指向哪裡？Person.prototype本身是也一個物件，它直接指向JavaScript中最上層的物件起源<code>Object.prototype</code>。</p>
<p>由此可知，<code>Function.prototype</code>也會同樣指向<code>Object.prototype</code>。然而剛剛也說了<code>Object.prototype</code>是原型鏈的最上層，那它的__proto__又會指向哪呢？以下用程式碼驗證就清楚了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__) <span class="comment">// Function.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__.__proto__) <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__.__proto__.__proto__) <span class="comment">// Null</span></span><br></pre></td></tr></table></figure>

<p>原型鏈的終點答案就是指向<code>Null</code>，所以可以說<code>Object.prototype</code>就是原型鏈的最上層。</p>
<p>用之前的例子做出以下簡單的圖示，圖片中紅色箭頭即為<code>__proto__</code>的指向</p>
<p><img data-src="1_drawio.png"></p>
<blockquote>
<p>註：<code>__proto__</code>注意是前後各有兩條下底線（_）。<br>註：雖然現今<code>__proto__</code>被幾乎所有瀏覽器支援，且ES6已經正式被標準化，以確保 Web 瀏覽器的兼容性，但是不推薦使用，除了標準化的原因之外還有性能問題。為了更好的支援，建議使用Object.getPrototype()。</p>
</blockquote>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>這邊要指供兩個指令來為原型鏈的介紹作結：</p>
<ol>
<li><code>hasOwnProperty</code></li>
<li><code>instanceof</code></li>
</ol>
<h4 id="這個是誰的屬性或方法？"><a href="#這個是誰的屬性或方法？" class="headerlink" title="這個是誰的屬性或方法？"></a>這個是誰的屬性或方法？</h4><p><code>hasOwnProperty</code>可以用於只檢查屬性或方法是否屬於<strong>當前物件</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Alan.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">Alan.hasOwnProperty(<span class="string">&#x27;species&#x27;</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>name確實是屬於Alan實例內部的屬性，但是species並不在其中，而是在原型鏈中。</p>
<p>如果要檢查整條串鏈，可以用<code>prop in object</code>的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;species&#x27;</span> <span class="keyword">in</span> Alan <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>prop in object</code>會檢查整個原型鏈，<strong>不管屬性是否可列舉</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Alan, <span class="string">&#x27;legs&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="comment">// 設定 legs 為不可列舉的屬性</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;legs&#x27;</span> <span class="keyword">in</span> Alan <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>這邊自訂一個<code>legs</code>屬性，並設定為不可列舉，用<code>prop in object</code>依然可以在<code>Alan</code>原型鏈中找到<code>legs</code>。</p>
<p>如果想要印出實例中所有的屬性方法，可以用<code>for loop prop in object</code>的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> Alan) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>for loop prop in object</code>會檢查整個原型鏈且為<strong>可列舉</strong>的屬性。<br>所以會印出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name</span><br><span class="line">age</span><br><span class="line">gender</span><br><span class="line">interests</span><br><span class="line">species</span><br></pre></td></tr></table></figure>

<p>可以發現除了<code>legs</code>以外，所有原型鏈的屬性都被印出。</p>
<h4 id="這個是誰的實例？"><a href="#這個是誰的實例？" class="headerlink" title="這個是誰的實例？"></a>這個是誰的實例？</h4><p>語法</p>
<blockquote>
<p><em>object instanceof constructor</em></p>
</blockquote>
<p><code>instanceof</code>運算符用來檢查<code>constructor.prototype</code>是否存在於object的原型鏈上。這在傳統物件導向環境中稱為「內省」（introspection）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Alan <span class="keyword">instanceof</span> Person  <span class="comment">// true</span></span><br><span class="line">Alan <span class="keyword">instanceof</span> <span class="built_in">Object</span>  <span class="comment">// true</span></span><br><span class="line">Alan <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// false</span></span><br><span class="line">Person <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line">Person <span class="keyword">instanceof</span> Person  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><code>instanceof</code>運算符對不同資料型別作用的範例可以參考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL2luc3RhbmNlb2Y=">這裡<i class="fa fa-external-link-alt"></i></span>。</p>
<p>另一個方法是<code>isPrototypeOf</code>，這個用法跟<code>instanceof</code>基本上相同，但是在某些情況下<code>instanceof</code>會出現TypeError而<code>isPrototypeOf</code>運作正常。所以相較之下<code>isPrototypeOf</code>是較萬用的。可以參考<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTgzNDM1NDUvamF2YXNjcmlwdC1pc3Byb3RvdHlwZW9mLXZzLWluc3RhbmNlb2YtdXNhZ2UvMTgzNDM4NDk=">這篇<i class="fa fa-external-link-alt"></i></span>。</p>
<p>語法</p>
<blockquote>
<p><em>isPrototypeOf(object)</em></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.isPrototypeOf(Alan)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>JavaScript學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript學習筆記2 - 什麼是原型基礎物件導向（下）</title>
    <url>/programming/20211119/996470916/</url>
    <content><![CDATA[<h2 id="ES6的Class"><a href="#ES6的Class" class="headerlink" title="ES6的Class"></a>ES6的Class</h2><p>把前面的範例透過Class方法重新編寫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">first, last, age, gender, interests</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: first,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.interests = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;<span class="built_in">this</span>.name.first&#125;</span>!`</span>)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 這裡定義方法會自動放到Person.prototype，但是定義prototype屬性不行用這個方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.species = <span class="string">&#x27;human&#x27;</span> <span class="comment">// 屬性只能用原來的方法給到prototype內</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alan = <span class="keyword">new</span> Person</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype) <span class="comment">// &#123;species: &#x27;human&#x27;, constructor, hello&#125;</span></span><br></pre></td></tr></table></figure>

<p>為了示範ES6的Class可以直接將方法加入建構子的prototype內，所以在constructor的後方加入<code>Hello()</code>，並且印出Person.prototype驗證。</p>
<p>類別一旦宣告完成，可以任意將之實例化。另外，類別也可以被繼承（Extend），子類別會預設繼承父類別的方法和屬性—當然，也可以在子類別上重新設定繼承來的方法與屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">first, last, age, gender, schoolId</span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(first, last, age, gender) <span class="comment">// 呼叫Person的建構子</span></span><br><span class="line">    <span class="built_in">this</span>.schoolId = schoolId</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alice  = <span class="keyword">new</span> Student(<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Wang&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;female&#x27;</span>, <span class="number">60229</span>)</span><br><span class="line">Alice.hello() <span class="comment">// hello Alice!</span></span><br></pre></td></tr></table></figure>

<p>非常方便的語法糖，當然背後仍然是依靠物件原型及原型鏈。</p>
<h2 id="原型鏈的效能及一些問題深入探討"><a href="#原型鏈的效能及一些問題深入探討" class="headerlink" title="原型鏈的效能及一些問題深入探討"></a>原型鏈的效能及一些問題深入探討</h2><h3 id="Q1：為什麼建構函式裡要用this-prop，this指向哪裡？"><a href="#Q1：為什麼建構函式裡要用this-prop，this指向哪裡？" class="headerlink" title="Q1：為什麼建構函式裡要用this.prop，this指向哪裡？"></a>Q1：為什麼建構函式裡要用this.prop，this指向哪裡？</h3><p>為什麼在<code>Person</code>裡使用<code>this</code>會是幫實例加上屬性呢？<br>其實正常來說函式中的<code>this</code>在指向的應該會是全域環境的<code>window</code>（在瀏覽器上執行），所以直接執行<code>Person</code>的話，會是<code>window</code>被設定屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: first,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : last</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.interests = interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>所以關鍵是<code>new</code>，以下模擬<code>new</code>做的事情：</p>
<ol>
<li>建立新物件：建立一個新物件，起初這個物件的<code>__proto__</code>指向的會是<code>Object.prototype</code></li>
<li>重新指向原型：重新將<code>__proto__</code>指向建構函式的原型，使物件成為建構函式的實例</li>
<li>初始化物件：執行建構函式，但利用<code>apply</code>將<code>this</code>指定給實例，這樣才能為它新增屬性</li>
<li>回傳新物件：最後回傳這個處理完成的實例</li>
</ol>
<p><code>new</code>背後做的事情不是很複雜但卻很重要，它將實例以及原型之間建立了連結。</p>
<h3 id="Q2：箭頭函式可以作建構函式嗎？"><a href="#Q2：箭頭函式可以作建構函式嗎？" class="headerlink" title="Q2：箭頭函式可以作建構函式嗎？"></a>Q2：箭頭函式可以作建構函式嗎？</h3><p>答案是不行。</p>
<ol>
<li>箭頭函式沒有<code>[[construct]]</code>這個內部方法，所以箭頭函式本身不能被用作建構函式。</li>
<li>箭頭函式本身沒有<code>this</code>，箭頭函式的<code>this</code>會指向程式碼外層的詞法作用域（lexical scoping），所以依照Q1說明的，<code>new</code>關鍵字的其中步驟是將函式中的<code>this</code>指定給實例，既然箭頭函式本身沒有<code>this</code>當然就無法被<code>new</code>呼叫。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Person(<span class="string">&#x27;Alan&#x27;</span>, <span class="number">26</span>); <span class="comment">// TypeError: Person is not a constructor</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>箭頭函式沒有原型，由於不可以通過new關鍵字呼叫箭頭函式，因此沒有構建原型的需求，所以箭頭函式不存在prototype這個屬性。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo.prototype); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo.prototype); <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>補充說明：不可以通過call、apply、bind改變箭頭函式的<code>this</code>指向，箭頭函式的內部<code>this</code>值在定義時已經確定了，在函式的生命週期內始終保持一致。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();               <span class="comment">// 10</span></span><br><span class="line">foo.call(&#123;<span class="attr">a</span>: <span class="number">20</span>&#125;);   <span class="comment">// 10</span></span><br><span class="line">foo.apply(&#123;<span class="attr">a</span>: <span class="number">20</span>&#125;);  <span class="comment">// 10</span></span><br><span class="line">foo.bind(&#123;<span class="attr">a</span>: <span class="number">20</span>&#125;)(); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h3 id="Q3：原型繼承：new與Object-create"><a href="#Q3：原型繼承：new與Object-create" class="headerlink" title="Q3：原型繼承：new與Object.create()"></a>Q3：原型繼承：new與Object.create()</h3><p>原型繼承的方法前面<code>new</code>介紹過了，接下來要講解<code>Object.create()</code>，首先看使用範例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;last&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;gender&#x27;</span>,</span><br><span class="line">  <span class="attr">interests</span>: <span class="string">&#x27;interests&#x27;</span>,</span><br><span class="line">  <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;<span class="built_in">this</span>.name.first&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.name.last&#125;</span>! You are <span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span> years old!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Alan = <span class="built_in">Object</span>.create(Person)</span><br><span class="line"><span class="built_in">console</span>.log(Alan) <span class="comment">// 帶入參數前</span></span><br><span class="line">Alan.age = <span class="number">26</span></span><br><span class="line">Alan.name.first = <span class="string">&#x27;Alan&#x27;</span></span><br><span class="line">Alan.name.last = <span class="string">&#x27;Green&#x27;</span></span><br><span class="line">Alan.hello()</span><br><span class="line"><span class="built_in">console</span>.log(Alan) <span class="comment">// 帶入參數後</span></span><br></pre></td></tr></table></figure>

<p>首先看這段程式碼會印出什麼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Alan = <span class="built_in">Object</span>.create(Person)</span><br><span class="line"><span class="built_in">console</span>.log(Alan) <span class="comment">// 帶入參數前</span></span><br></pre></td></tr></table></figure>

<p>輸出的結果如下，它是一個空物件，但是它繼承了<code>Person</code>這個物件當中的屬性和方法，並存在<code>[[prototype]]</code>內：</p>
<p><img data-src="3.png"></p>
<blockquote>
<p><code>[[]]</code>雙括號代表物件的「內部屬性」（見<span class="exturl" data-url="aHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy81LjEvI3NlYy04LjYuMg==">ECMAScript 8.6.2<i class="fa fa-external-link-alt"></i></span>），這類符號不是一個能在程式編寫使用的屬性。它只是提供資訊用。而在devtool可以看到這些資訊，例如Chrome console的<code>[[prototype]]</code>。但是Firefox表示方法是：<code>&lt;prototype&gt;</code>。</p>
</blockquote>
<p><code>[[prototype]]</code>是所有物件內部都有的特殊屬性，提供<strong>內部插槽（internal slot）</strong>供物件存放prototype的屬性或方法。<code>__proto__</code>則是一個getter/setter，用來存取<code>[[prototype]]</code>內部插槽的值。</p>
<blockquote>
<p>註：<span class="exturl" data-url="aHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHM=">內部插槽（internal slot）<i class="fa fa-external-link-alt"></i></span>是用來表示物件內部狀態，並被各種ECMAScript規範算法所使用。重要的是，內部插槽不是物件屬性，也不能被繼承。<br>註：其實看到一些較舊的文章，會發現以前Chrome console顯示的是__proto__，這跟上面提到的<code>__proto__</code>是不同的東西，這是<code>[[prototype]]</code>的前身，且已被取代。</p>
</blockquote>
<p><img data-src="4.png"></p>
<p>接著看後面的程式碼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Alan.age = <span class="number">26</span></span><br><span class="line">Alan.name.first = <span class="string">&#x27;Alan&#x27;</span>  <span class="comment">// 不建議直接修改[[prototype]]</span></span><br><span class="line">Alan.name.last = <span class="string">&#x27;Green&#x27;</span>  <span class="comment">// 不建議直接修改[[prototype]]</span></span><br><span class="line">Alan.hello()</span><br><span class="line"><span class="built_in">console</span>.log(Alan) <span class="comment">// 帶入參數後</span></span><br></pre></td></tr></table></figure>

<p><img data-src="5.png"></p>
<p>由於原型鏈，可以在這個物件中建立相同屬性的內容，在執行的時候它會先找物件最外層的屬性，於是就不會得到default的結果。所以，對於<code>age</code>來說，這物件已經有這個屬性，它就不會往物件的原型去尋找，而對<code>hello</code>來說，因為<code>Alan</code>物件裡沒有這個方法，於是會到<code>[[prototype]]</code>裡面去找。另外要說一下，<code>first</code>和<code>last</code>雖然有定義，但是與<code>Alan.name = &#123; first: &#39;Alan&#39;, last: &#39;Green&#39; &#125;</code>不同，並沒有在<code>Alan</code>物件中產生新的屬性，而是更改了<code>[[prototype]]</code>內部值，所以<code>first</code>和<code>last</code>一樣要到<code>[[prototype]]</code>內去找。<code>Alan.hello()</code>印出來就會是<code>Hello, Alan Green! You are 26 years old!</code><br>所以透過<code>Object.create()</code>的方法，是最單純使用原型繼承的方法。只需先建立一個A物件，再建立另一個B物件並用<code>Object.create()</code>指向A物件當做它的原型，並賦予屬性及方法。</p>
<p><code>Alan</code>與<code>Person</code>的原型鏈關係又是如何？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Alan.__proto__ === Person)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="Q4：直接修改prototype影響效能？"><a href="#Q4：直接修改prototype影響效能？" class="headerlink" title="Q4：直接修改prototype影響效能？"></a>Q4：直接修改prototype影響效能？</h3><blockquote>
<p>基於現代Javascript引擎最佳化物件屬性存取的方法，改變一個物件的<code>[[Prototype]]</code>在任何瀏覽器或是Javascript引擎都是非常慢的操作。改變繼承屬性對效能的影響微妙且深遠，不僅僅只是影響執行<code>obj.__proto__ = ...</code>的時間，而是會影響到所有有存取到被改變<code>[[Prototype]]</code>的物件的程式碼的執行時間。如果你在乎效能的話就應該避免改變一個物件的<code>[[Prototype]]</code>。反之，請用 Object.create() 來產生一個擁有<code>[[Prototype]]</code>的物件。 — <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L3Byb3Rv">MDN<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章是我找了很多參考資料，包含Stack Overflow的很多問答而寫的集大成。了解原型可以幫助了解JavaScript的運作模式，尤其是在寫ES6的Class語法糖的時候，裡面的constructor是什麼意思，用extends的意思，都可以比較了解了。（雖然目前class componment目前正在被社群逐漸淘汰中，都改用function conponent取代）</p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9leWVzb2ZraWRzLmdpdGJvb2tzLmlvL2phdmFzY3JpcHQtc3RhcnQtZnJvbS1lczYvY29udGVudC9wYXJ0NC9wcm90b3R5cGUuaHRtbA==">從ES6開始的JavaScript學習生活 - 原型基礎物件導向<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwNTMxMw==">你懂 JavaScript 嗎？#19 原型（Prototype）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMzU1Ng==">15. [JS] 什麼是原型鏈？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvNjkyODQ1LyNvdXRsaW5lX18z">JavaScript原型系列（一）構造函數、原型和原型鏈<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMDYvZGVzaWduaW5nX2lkZWFzX29mX2luaGVyaXRhbmNlX21lY2hhbmlzbV9pbl9qYXZhc2NyaXB0Lmh0bWw=">Javascript继承机制的设计思想<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxOC8xMC8yNi9wcm90b3R5cGUv">你懂 JavaScript 嗎？#19 原型（Prototype）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTYvMDYvamF2YXNjcmlwdHByb3RvdHlwZXByb3RvdHlwZS5odG1s">[筆記] 了解JavaScript中原型(prototype)、原型鍊（prototype chain）和繼承(inheritance)的概念<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYXhsZWViay5jb20vMjAyMC8wNy8yNS9wcm90b3R5cGUv">面試官最愛考的 JS 原型鏈<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtZW5nY2hpYW5nMDAwL2pzJUU1JTlGJUJBJUU2JTlDJUFDJUU4JUE3JTgwJUU1JUJGJUI1LSVFNSU4RSU5RiVFNSU5RSU4QiVFOSU4RiU4OC1wcm90b3R5cGUtY2hhaW4tOTZjNzQyODkzNzk1">JS基本觀念: 原型鏈(prototype chain)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3VzaGljaWt1LmNuL3BsL2dWOFkvemgtdHc=">javascript之作用域與this指向<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>JavaScript學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript學習筆記3 - 用Node.js和Express創建RESTful API（上）</title>
    <url>/programming/20211122/1923810251/</url>
    <content><![CDATA[<p>相信在找網路相關工作的人，不管是前端網頁工程師或APP工程師，當然後端工程師就不用講，一定聽過「API」。但是我想很多初次接觸的人一定會抱著三大問題：</p>
<ol>
<li>什麼是API？什麼又是RESTful API？</li>
<li>API怎麼做</li>
<li>API要怎麼串接</li>
</ol>
<p>這篇文章就先來說明前2個問題吧，Let’s Go!</p>
<h2 id="什麼是API？什麼又是RESTful-API"><a href="#什麼是API？什麼又是RESTful-API" class="headerlink" title="什麼是API？什麼又是RESTful API"></a>什麼是API？什麼又是RESTful API</h2><p>查維基百科可以知道，API全名是Application Programming Interface，中文叫應用程式介面。我覺得這裡可以跟UI做一個比較：</p>
<table>
<thead>
<tr>
<th align="center">中文</th>
<th align="center">英文</th>
<th align="center">定義</th>
</tr>
</thead>
<tbody><tr>
<td align="center">應用程式介面</td>
<td align="center">Application Programming Interface</td>
<td align="center">是一種計算介面，它定義多個軟體中介之間的互動</td>
</tr>
<tr>
<td align="center">使用者介面</td>
<td align="center">User Interface</td>
<td align="center">是系統和使用者之間進行互動和資訊交換的媒介</td>
</tr>
</tbody></table>
<p>可以發現兩個英文都是Interface，中文可以翻譯介面、接口、端口，總之就是一個互動性的中介，不過可以看到一個對口是應用程式，一個則是對使用者。拿飲料自動販賣機來舉例：</p>
<p><img data-src="01.png" alt="示意圖"></p>
<p>藍色箭頭：系統用API告訴機器各個產品的價位跟存貨狀態，機器再用好看的UI告訴消費者這些資訊。<br>綠色箭頭：而當消費者選好飲料時按下UI的按鈕，機器會再用API告訴系統該吐什麼產品出來給消費者，消費者就得到了他想要的產品了。</p>
<p>所以API是什麼東西大家應該都清楚了，概念就是這麼簡單。那什麼又是RESTful API呢？</p>
<p>它其實是一個Roy Thomas Fielding博士在2000年提出的一種<strong>全球資訊網軟體架構風格</strong>，全名Representational State Transfer（簡稱REST），其實不用太擔心這個看似複雜的詞，它只是定義你API應該要長怎樣，當然它有一些規則需要遵從，不過這邊我們只要知道現今的API幾乎都是RESTful API就好了。</p>
<h2 id="進入正題，API怎麼做"><a href="#進入正題，API怎麼做" class="headerlink" title="進入正題，API怎麼做"></a>進入正題，API怎麼做</h2><p>首先，來說說工具吧！</p>
<ul>
<li>編輯器：VSCode</li>
<li>後端：Node.js、Express.js</li>
<li>資料測試：Postman</li>
</ul>
<p>前端工具要等到串接API的時候才會用到，到時候再列出來！</p>
<p>Node版本：v14.17.3</p>
<blockquote>
<p>網路上有很多下載教學了，這邊要說明一下以下的教學要下載至少<code>Node.js &gt;= v13</code>的版本，<br>這個版本中只要在<code>package.json</code>中加入<code>&#123; &quot;type&quot;: &quot;module&quot; &#125;</code>就可以使用<code>import</code>和<code>export</code>語法，例如：<code>import express from &#39;express&#39;;</code>。否則就要用原本的引入方法：<code>const express = require(&#39;express&#39;)</code></p>
</blockquote>
<h3 id="建置環境"><a href="#建置環境" class="headerlink" title="建置環境"></a>建置環境</h3><p>以下教學會從零到有建置，當然也有另一個快速的方法，就是使用<code>Express generator</code>來快速建立起應用程式架構，這個就不說了網路查都有很多教學。那就讓我們重頭開始吧。</p>
<p>先在專案資料夾用Terminal輸入以下程式碼來初始化專案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure>

<p>其實輸入<code>npm init</code>就會初始化，但是會有很多選項要選，<code>-y</code>就是自動幫你選yes的意思。之後會產生一個package.json檔，這會記錄這個專案所使用的所有套件（名稱、版本），當有其他人要一起維護或開發專案時，做為套件傳遞使用，他們只要擁有這個檔案直接執行<code>npm install</code>或<code>yarn install</code>就會幫忙把所有套件裝回來以節省傳輸專案的速度和雲端空間。另外在安裝套件後會同時新增一個<code>package-lock.json</code>或<code>yarn-lock.json</code>，這是因為套件會有更新版，而每次下載都會自動下載最新的，有時候新舊版本會有相容性的問題，才會用這個lock檔讓別人下載時也會得到相同版本。</p>
<blockquote>
<p>這裡補充一下，使用npm或yarn都可以，<strong>但是不要混用</strong>，會造成設定檔重複，有時候會報錯。至於要用哪個，可以網路搜尋兩個的差異再決定。</p>
</blockquote>
<p>來看一下package.json檔（用npm init和用yarn init可能會稍微不一樣但是沒關係）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;blog-test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>, <span class="comment">// 程式進入點</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到index.js就是程式的進入點，所以我們在專案資料夾下直接建立一個index.js</p>
<p>-Tree</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌── index.js</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<p>接著安裝Express套件，Terminal輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add express</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其實直接輸入<code>npm install express</code>就可以了，<code>--save</code>是將套件保存至Dependencies，但是npm5以後就已經預設會自動加入Dependencies了。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;blog-test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊可以看到express已被加入package.json內的dependencies，後面標註版本是v4.17.1，之後如果有再安裝套件會像這樣被加入package.json檔，就不會再贅述了。</p>
<p>另外前面提到待會要用的<code>import</code>和<code>export</code>方法要在package.json檔內加入<code>&#123; &quot;type&quot;: &quot;module&quot; &#125;</code>檔，就讓我們加入吧！</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;blog-test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">//加入type，記得json檔只能用雙引號</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>環境設置的部分就到這裡告一段落，接著就是Coding的部分了！</p>
<h3 id="Express解析"><a href="#Express解析" class="headerlink" title="Express解析"></a>Express解析</h3><p>因為我們將用到Express，所以最好對這軟體有些初步了解，首先我們來看一下官方文件說Express可以做什麼，<span class="exturl" data-url="aHR0cHM6Ly9leHByZXNzanMuY29tL3poLXR3L2d1aWRlL3JvdXRpbmcuaHRtbA==">官網<i class="fa fa-external-link-alt"></i></span>手冊裡可以明確看到路由、中介軟體、Proxy這幾個關鍵字。</p>
<ul>
<li>路由（Routing）是指根據路徑和HTTP請求方法（<strong>CRUD</strong>）設定要執行哪些函數，函數可以一個也可以多個。</li>
</ul>
<blockquote>
<p><strong>CRUD</strong>是指資料處理中會用到的動作行為，分別代表Create、Read、Update、Delete，也就是中文的增刪查改。而HTTP請求方法<code>METHOD()</code>最常見的有：<br>Create的<code>post</code><br>Read的<code>get</code><br>Update的<code>put</code>和<code>patch</code><br>Delete的<code>delete</code></p>
</blockquote>
<p>創造一個最簡單的路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這個路由代表在根目錄（/）的時候如果請求get會得到一個’Hello world!’的回應。</p>
<ul>
<li>中介軟體（middleware）是指從請求經由路由到響應的過程中，用來完成特定任務的函數。例如檢查用戶有無權限或者是否已登入等等。</li>
</ul>
<p>中介軟體一樣是可以接收request跟response物件的函數，中介軟體可以對req和res物件進行變更，也可以決定req和res是否在此結束或者繼續傳遞至下一個中介軟體，當選擇繼續傳遞時要使用<code>next()</code>，用法主要有兩種：<br>舉例1：使用use()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;LOGGED&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>首先在剛剛的路由前面加上一個中介軟體，這段程式代表每當應用程式收到要求時，它會在Terminal印出’LOGGED’。</p>
<p>舉例2：中介軟體堆疊</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (auth = token)&#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;You are not authenticated!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這段程式代表在根目錄（/）請求get時會先在中介軟體中判斷是否有授權（auth = token），如果有就執行路由回傳’hello world!’，沒有的話則回傳’You are not authenticated’並結束循環。</p>
<p>補充一下，中介軟體還有一個用法，首先看下列程式碼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;goodnight world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這邊當我們針對根目錄的GET要求，定義了兩個路由，只有前者會執行，雖然第二個路由是沒問題的，但是要求/回應循環會在第一個路由結束就停止。這時候可以利用中介軟體呼叫<code>next(&#39;route&#39;)</code>來跳過堆疊中的其餘中介軟體，並將控制權傳給下一個路由。直接看修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (now = night)&#123;</span><br><span class="line">    next(<span class="string">&#x27;route&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;goodnight world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>最後是錯誤處理用的中介軟體，基本上跟中介軟體一樣，不過多了一個引數：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>補充這邊舉例的<code>app.METHOD()</code>只有用到GET，但是其實方法就像前面CRUD提到的當然不只一種，例如：<code>app.get()</code>、<code>app.post()</code>、<code>app.put()</code>、<code>app.patch()</code>、<code>app.delete()</code>、……等等。還有<code>app.all()</code>代表該路徑的所有請求方法都可以匹配，會蓋過get、post、delete等方法。</p>
</blockquote>
<p><code>app.all()</code>跟<code>app.use()</code>的差異如下（詳見<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAxNzM1NTcwOQ==">本網頁<i class="fa fa-external-link-alt"></i></span>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/product&#x27;</span>, handler)</span><br><span class="line"><span class="comment">// will match /product</span></span><br><span class="line"><span class="comment">// won&#x27;t match /product/cool   &lt;-- important</span></span><br><span class="line"><span class="comment">// won&#x27;t match /product/foo    &lt;-- important</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/product&#x27;</span>, middleware)</span><br><span class="line"><span class="comment">// will match /product</span></span><br><span class="line"><span class="comment">// will match /product/cool</span></span><br><span class="line"><span class="comment">// will match /product/foo</span></span><br></pre></td></tr></table></figure>

<p>基本上Express還有許多功能，可以參閱官方文件，不過以我們這篇專案會用到的觀念都介紹得差不多。接下來就繼續實作吧！</p>
<h3 id="開始Coding：打造API的進入點"><a href="#開始Coding：打造API的進入點" class="headerlink" title="開始Coding：打造API的進入點"></a>開始Coding：打造API的進入點</h3><p>在根目錄的index.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">5000</span> <span class="comment">//註1</span></span><br><span class="line"></span><br><span class="line">app.use(express.json()) <span class="comment">//註2</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">()=&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Server is running at http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>)) <span class="comment">//註3</span></span><br></pre></td></tr></table></figure>

<p>備註：</p>
<ol>
<li>通常在JavaScript會用全大寫的參數來代表這個值是固定不變的，前端常用的PORT是3000，而後端常用的PORT是5000，當然也可以設定為任意數，只要留意有些程式會有預設PORT，例如網頁的80、FTP的21、MySQL的3306等等，不要重複以免佔用。</li>
<li>這句代表我們引入express的資料會用json的形式表示，這裡以前是須要引入body-parser的，例<code>bodyParser.json()</code>，不過後來Express把bodyParser套件給包進去。</li>
<li>這句代表在應用程式執行的時候，會在埠5000接聽連線，並且在Terminal印出<code>Server is running at http://localhost:5000</code>。</li>
</ol>
<p>接著只要執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure>

<p>然後在瀏覽器中載入<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo1MDAwLw==">http://localhost:5000/<i class="fa fa-external-link-alt"></i></span>就可以看到應用程式對指向根URL（/)，以「Hello World!」回應。</p>
<p>因為文長的關係，下一篇再繼續囉！</p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>JavaScript學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>開發工具 - VSCode基礎設置</title>
    <url>/programming/20210806/3967904930/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Visual Studio Code（以下簡稱VSCode）是目前大家最推薦的原始碼編輯器，VSCode的好處多多，支援很多程式語言還有可以在內建的擴充程式商店安裝擴充，也有偵錯和代碼自動補全的功能等等，最重要的是<strong>免費</strong>，所以很多人推薦新手直接學習VSCode。筆者從自學一開始就是接觸VSCode。其他還有很多編輯器（Sublime、ATOM、Dreamweaver、……）筆者自己也沒用過（汗）。</p>
<p>以下會說明VSCode內的一些功能設定方法，擴充推薦未來會再出一篇文章說明。</p>
<h3 id="TAB縮排"><a href="#TAB縮排" class="headerlink" title="TAB縮排"></a>TAB縮排</h3><p>VSCode預設的Tab為4個半形空白，但是根據ESLint的標準，在寫JS的時候還是改成2個半形空白會比較好。<br>（關於ESLint的說明，很推薦大家去看Eddy大的Gitbook中<span class="exturl" data-url="aHR0cHM6Ly9leWVzb2ZraWRzLmdpdGJvb2tzLmlvL3JlYWN0LWJhc2ljLXpoLXR3L2NvbnRlbnQvZGF5MDNfZXNsaW50Lw==">工具篇-ESLint<i class="fa fa-external-link-alt"></i></span>）</p>
<p>首先說明VSCode的自動縮排快捷鍵是：<code>Shift + Alt + F</code></p>
<h4 id="選擇縮排"><a href="#選擇縮排" class="headerlink" title="選擇縮排"></a>選擇縮排</h4><p> 看向視窗的下方有一個空格：4就代表每一行Tab的縮排是4個空格<br> <img data-src="2.png" alt="空格：4"><br> 若要將其設為2，則是<strong>點選空格後，選擇「使用空格鍵進行縮排」</strong>，改為2即可。<br> 修改後再使用VSCode自動縮排（Shift+Alt+F）就會變更了<br> <img data-src="2-1.gif" alt="修改空格"></p>
<h4 id="選單設定"><a href="#選單設定" class="headerlink" title="選單設定"></a>選單設定</h4><p> 另外如果未來不想要每次都要修改縮排設定的話，就到選單設定裡做一些變更：</p>
<ol>
<li><strong>檔案&gt;喜好設定&gt;設定</strong></li>
<li>搜尋Tab size並將其值改為2</li>
</ol>
<p><img data-src="3.png" alt="檔案&gt;喜好設定&gt;設定"></p>
<p><img data-src="4.png" alt="Tab size to 2"><br> 並且把Detect Indentation 取消勾選<br><img data-src="1.png" alt="Detect Indentation"></p>
<h3 id="自訂程式碼片段（Snippet）"><a href="#自訂程式碼片段（Snippet）" class="headerlink" title="自訂程式碼片段（Snippet）"></a>自訂程式碼片段（Snippet）</h3><p>當我們有重複的程式碼要輸入時，有Snippet可以提升我們Coding的效率。<br>範例如下：<br><img data-src="5.gif" alt="snippet示範"></p>
<p>或者我們可以用一個模板讓我們填入自定義值：<br><img data-src="5-1.gif" alt="snippet示範2"></p>
<p>以上範例都是需要自己建立的，不是開啟就有的功能喔！<br>要建立自己的Snippet首先到<strong>檔案&gt;喜好設定&gt;使用者程式碼片段</strong><br><img data-src="5-2.png" alt="Snippet設定"><br>接著可以根據需要的語言進行設定，可以看到我現有的程式碼片段就有2個（css/ html），也可以選擇其他的語言或者全域程式碼片段去設定。<br><img data-src="5-3.png" alt="Snippet設定2"></p>
<p>Snippet設定會以json檔案編輯，以下為格式說明：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;//Snippet名稱&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;//想要的縮寫&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;//Snippet內容&quot;</span></span><br><span class="line">    ],</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;//說明描述&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中body裡的設定有幾點說明：</p>
<ul>
<li>用”$”加上數字的組合可以成為特殊字組（例如：<code>$1</code>, <code>$2</code>），特殊字組所在的區域就是每按1次TAB會停在該區域，可以打上任何值再按TAB跳到下個區域，例如：<code>&quot;&lt;img src=\&quot;https://picsum.photos/$1/$2?random=$3\&quot;&gt;&quot;</code></li>
<li>因為是字串（string），前後必須加上雙引號（”），那問題來了裡面如果又有雙引號就會碰上錯誤，這時候要在裡面的雙引號前面加上倒斜線（<code>\&quot;</code>），例如：<code>&quot;&lt;img src=\&quot;https://picsum.photos/300/400?random=1\&quot;&gt;&quot;</code></li>
<li>body的每一個字串陣列都代表程式碼的<strong>一行</strong>，換行要記得在每行字串後用逗號（,）隔開，例如：</li>
</ul>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;* &#123;&quot;</span>,</span><br><span class="line"><span class="string">&quot;margin: 0;&quot;</span>,</span><br><span class="line"><span class="string">&quot;padding: 0;&quot;</span>,</span><br><span class="line"><span class="string">&quot;list-style: none;&quot;</span>,</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="快速撰寫輔助工具（Emmet）-使用縮寫換行（wrap-with-abbreviation）"><a href="#快速撰寫輔助工具（Emmet）-使用縮寫換行（wrap-with-abbreviation）" class="headerlink" title="快速撰寫輔助工具（Emmet） - 使用縮寫換行（wrap with abbreviation）"></a>快速撰寫輔助工具（Emmet） - 使用縮寫換行（wrap with abbreviation）</h3><p>高手在使用VSCode的時候其實是可以不使用滑鼠完成大部分的程式碼編寫，而且效率比使用滑鼠還高。<br>這也是多虧了Emmet功能，所以最後要介紹的是Emmet其中一項功能，快速包住程式碼（wrap with abbreviation）<br>首先說明VSCode有內建功能，當你反白一段字串後可以用輸入引號或大中小括號（’’,””,(),[],{}）快速把反白字串包住。<br><img data-src="6.gif" alt="Emmet"><br>而現在要介紹的就是進階版功能，用標籤（Tag)把字串快速包住：<br><img data-src="6-1.gif" alt="縮寫換行示範"></p>
<p>這個其實是使用了工作台的功能Wrap with abbreviation，步驟如下：</p>
<ol>
<li><code>Ctrl + Shift + P</code>可以叫出工作台</li>
<li>輸入wrap with abbreviation按下Enter</li>
<li>輸入你想包入的縮寫，就大功告成啦<br><img data-src="6-2.png" alt="wrap with abbreviation"><br>另外如果要做到像我一樣迅速使用，就是要設定快捷鍵。<br>設定方法就是按下右邊的齒輪，進去後再按編輯鍵設定即可，這邊我是設定<code>Shift + Alt + W</code><br><img data-src="6-3.png" alt="shortcut setting"></li>
</ol>
<p>以上文章是我整理的一些實用功能和設定，其實如果平常有空應該多爬爬這類型的文章，應該可以加快不少寫程式碼的速度。<br>那麼我們下一篇見！</p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>開發工具 - VSCode擴充功能</title>
    <url>/programming/20210808/91963548/</url>
    <content><![CDATA[<h3 id="擴充套件"><a href="#擴充套件" class="headerlink" title="擴充套件"></a>擴充套件</h3><p>又稱延伸模組（Extension）。<br>首先要先說明我目前主要開發的語言是Javascript和React，目前還努力在前端打滾學習中。所以擴充主要都會圍繞在HTML、CSS、Javascript、React上。</p>
<p>使用擴充是見仁見智，所以我會依個人使用習慣來推薦，有興趣的就繼續看下去吧！</p>
<h3 id="高度推薦（必裝）"><a href="#高度推薦（必裝）" class="headerlink" title="高度推薦（必裝）"></a>高度推薦（必裝）</h3><h4 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h4><p><img data-src="1.png" alt="Live server"><br>Live Server能將HTML檔案轉換成瀏覽器網站並即時更新顯示，注意你需要先開啟一份HTML檔（.html)，接著只要按下VSCode右下角的<code>Go Live</code>按鈕或者右鍵<code>Open with live server</code>，就能開啟執行本地伺服器（Localhost）。</p>
<h4 id="Formate-CSS-LESS-and-SCSS-Formatter"><a href="#Formate-CSS-LESS-and-SCSS-Formatter" class="headerlink" title="Formate: CSS, LESS and SCSS Formatter"></a>Formate: CSS, LESS and SCSS Formatter</h4><p><img data-src="2.png" alt="Formate: CSS, LESS and SCSS Formatter"><br>HTML檔案在編譯的時候VSCode是有預設排版的，所以不需要另外安裝擴充，但是CSS就不一樣了，VSCode是沒有預設排版的功能，所以我推薦下載這個擴充。</p>
<h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><p><img data-src="3.png" alt="ESLint"><br>ESLint這個擴充是Javascript風格指引的輔助工具，如果說未來需要和別人共同開發專案，最好是從現在開始培養編寫習慣。<del>不然以後也許別人看你的程式碼會想拿磚頭砸你</del><br>剛開始使用一定會報出一堆錯誤，會覺得很麻煩。但是每個錯誤去了解為什麼並修正後，以後你的寫作風格就會很統一了。</p>
<h4 id="cdnjs"><a href="#cdnjs" class="headerlink" title="cdnjs"></a>cdnjs</h4><p><img data-src="4.png" alt="cdnjs"><br>這個擴充可以方便你嵌入或查詢cdnjs裡的各個JS框架版本，例如：jquery、Fontawesome、……等等。</p>
<h4 id="Chinese-Lorem"><a href="#Chinese-Lorem" class="headerlink" title="Chinese Lorem"></a>Chinese Lorem</h4><p><img data-src="5.png" alt="Chinese Lorem"><br>中文版的假字產生器，只需要輸入<code>ctlorem</code>或者加上字數<code>ctlorem120</code>。</p>
<h3 id="熱門推薦（選配）"><a href="#熱門推薦（選配）" class="headerlink" title="熱門推薦（選配）"></a>熱門推薦（選配）</h3><h4 id="indent-rainbow"><a href="#indent-rainbow" class="headerlink" title="indent-rainbow"></a>indent-rainbow</h4><p><img data-src="6.png" alt="indent-rainbow"><br>會把縮排空格填上彩虹的顏色，可以讓你更輕鬆比對縮排位置，雖說是熱門推薦但我是覺得畫面有點花而沒有使用，看個人吧！</p>
<h4 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a>Code Spell Checker</h4><p><img data-src="7.png" alt="Code Spell Checker"><br>這個擴充有利有弊，檢查英文有無拼錯非常好用，但是某些情況會誤報，而個人看到誤報的毛毛蟲會有強迫症想去掉，也是看個人有沒有英文拼字輔助的需求。</p>
<h4 id="Better-comments"><a href="#Better-comments" class="headerlink" title="Better comments"></a>Better comments</h4><p><img data-src="8.png" alt="Better comments"><br>可以讓你附註的文字變顏色，可以顯著標記之後要回來修改的地方等等重大資訊。</p>
<h3 id="根據語言需求安裝"><a href="#根據語言需求安裝" class="headerlink" title="根據語言需求安裝"></a>根據語言需求安裝</h3><h4 id="ES7-React-Redux-GraphQL-React-Native-snippets"><a href="#ES7-React-Redux-GraphQL-React-Native-snippets" class="headerlink" title="ES7 React/Redux/GraphQL/React-Native snippets"></a>ES7 React/Redux/GraphQL/React-Native snippets</h4><p><img data-src="9.png" alt="ES7 React/Redux/GraphQL/React-Native snippets"><br>一些React相關的snippets，有在寫React framework的是必載。</p>
<h4 id="Simple-React-Snippets"><a href="#Simple-React-Snippets" class="headerlink" title="Simple React Snippets"></a>Simple React Snippets</h4><p><img data-src="10.png" alt="Simple React Snippets"><br>這個和前一個擴充一樣是React snippets，但是內容稍微不同，可以互補使用。</p>
<h4 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h4><p><img data-src="11.png" alt="markdownlint"><br>因為我的網誌就是用markdown語法寫的，為了統一文章的寫作風格，所以我有下載markdownlint來糾正一些寫法的錯誤。有在寫Markdown的人也很推薦使用。</p>
<h3 id="其實這些擴充不用裝"><a href="#其實這些擴充不用裝" class="headerlink" title="其實這些擴充不用裝"></a>其實這些擴充不用裝</h3><h4 id="Auto-rename-tag"><a href="#Auto-rename-tag" class="headerlink" title="Auto rename tag"></a>Auto rename tag</h4><p>改標籤（TAG）會自動幫你連開頭和結尾一起變更，只適用.html檔，javascript內的是不適用這功能的。<br>但是這個擴充其實不用安裝，VSCode就有內建了，只需要在<code>檔案&gt;喜好設定&gt;設定</code>內搜尋<code>Editor: Linked Editing</code>勾選即可。（預設是：關）</p>
<h4 id="Auto-close-tag"><a href="#Auto-close-tag" class="headerlink" title="Auto close tag"></a>Auto close tag</h4><p>能自動在開頭標籤後生成結束標籤。<br>這個下載500萬次的擴充其實也是VSCode就有內建的功能，而且不必特別設定，預設就是開。但如果不小心關到，可以到<code>檔案&gt;喜好設定&gt;設定</code>搜尋<code>Auto Closing Tags</code>，把HTML: Auto Closing Tags、Javascript: Auto Closing Tags、Typescript: Auto Closing Tags這三項打勾<br>如果是用setting.json修改語法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;html.autoClosingTags&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.autoClosingTags&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;typescript.autoClosingTags&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
</search>
